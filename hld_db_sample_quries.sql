-- Insert a new project + assign employees into the database  
USE HLD_DB;

SET AUTOCOMMIT = 0;
START TRANSACTION;
UPDATE `EMPLOYEE`
SET 
  POSITION_ID = (
    SELECT POSITION_ID FROM `POSITION` 
    WHERE UPPER(POSITION_NAME) LIKE '%SENIOR DECOR%'
    ),
  SALARY = 12000.00
WHERE EMPLOYEE_ID = 29;
SELECT * FROM `EMPLOYEE` WHERE EMPLOYEE_ID = 29;
COMMIT;


SELECT * FROM `CLIENT`;
INSERT INTO `CLIENT`
  VALUES 
    (null, 'Guangzhou Glory Future Prints Co., Ltd.', 'Glory Future', null)
    ;
INSERT INTO `CONTACT_PERSON`
  VALUES
    (null, 'Li Bingbing', LAST_INSERT_ID(), '13763805713', null, 'last_emperor', null, null)
    ;
SELECT * FROM `CLIENT` NATURAL JOIN `CONTACT_PERSON` WHERE CLIENT_ABBR = 'Glory Future';
ROLLBACK;




START TRANSACTION;

-- add one new project
SELECT * FROM `PROJECT`;
INSERT INTO `PROJECT`
  VALUES 
    (null,
      'Shenzhen Exhibition Center Sheraton Hotel Interior Design',
      '2068 Jintian Rd', 'Shenzhen', 'Guangdong',
      CURDATE(),
      null,
      'preparing',
     (SELECT PROJECT_CLASS_ID
	   FROM `PROJECT_CLASS`
	   WHERE UPPER(PROJECT_CLASS_NAME) LIKE 'HOSPITALITY INTERIOR %'
	   )
    )
    ;
    
SELECT DISTINCT FILE_ID, FILE_NAME, FILE_PATH
FROM `FILE` 
  NATURAL JOIN `PORTFOLIO_MATERIAL` 
  NATURAL JOIN `PHASE` 
  NATURAL JOIN `PROJECT` 
WHERE PROJECT_NAME = 'Vanke Grand Meisha Headquarter';

SELECT `FILE`.FILE_ID, FILE_NAME, 
    `AUTHORSHIP`.EMZZLOYEE_ID AUTHOR_ID, 
    `REVIEW`.EMPLOYEE_ID REVIEWER_ID,
    VERIFIED_DATE
    FROM `FILE` 
      LEFT JOIN `AUTHORSHIP` 
      ON `FILE`.FILE_ID = `AUTHORSHIP`.FILE_ID 
      LEFT JOIN `REVIEW`
      ON `FILE`.FILE_ID = `REVIEW`.FILE_ID
      WHERE `FILE`.FILE_ID = 6;

SELECT * FROM `PROJECT`;

WITH `AUTHOR_NAME` AS (
  SELECT FULL_NAME, EMPLOYEE_ID, CONTRIBUTION, FILE_ID
    FROM `AUTHORSHIP` NATURAL JOIN `EMPLOYEE`)
SELECT `FILE`.FILE_ID, FULL_NAME, CONTRIBUTION
  FROM `AUTHOR_NAME` 
  RIGHT JOIN `FILE`
  ON `AUTHOR_NAME`.FILE_ID = `FILE`.FILE_ID
  WHERE `FILE`.FILE_ID = 6;


-- managers can check all the current employees;
SELECT EMPLOYEE_ID, FULL_NAME, POSITION_NAME, SALARY 
  FROM `EMPLOYEE` NATURAL JOIN `POSITION`
  WHERE EMPLOYMENT_STATUS = 1;

SELECT LAST_INSERT_ID(); -- 13
INSERT INTO `ASSIGNMENT`
  VALUES 
    (null, LAST_INSERT_ID(), 1, 1, (SELECT SALARY FROM `EMPLOYEE` WHERE EMPLOYEE_ID = 1)),
    (null, LAST_INSERT_ID(), 10, 2, (SELECT SALARY FROM `EMPLOYEE` WHERE EMPLOYEE_ID = 10)),
    (null, LAST_INSERT_ID(), 13, 4, (SELECT SALARY FROM `EMPLOYEE` WHERE EMPLOYEE_ID = 13)),
    (null, LAST_INSERT_ID(), 21, 4, (SELECT SALARY FROM `EMPLOYEE` WHERE EMPLOYEE_ID = 21)),
    (null, LAST_INSERT_ID(), 32, 7, (SELECT SALARY FROM `EMPLOYEE` WHERE EMPLOYEE_ID = 32)),
    (null, LAST_INSERT_ID(), 8, 3, (SELECT SALARY FROM `EMPLOYEE` WHERE EMPLOYEE_ID = 8))
    ;
SELECT * FROM `ASSIGNMENT` WHERE PROJECT_ID = 13;
-- assign employees to the new project

DELETE FROM `ASSIGNMENT` WHERE PROJECT_ID = 13 AND EMPLOYEE_ID = 13;
-- too many designers, remove 1 from the assignment;

-- ROLLBACK;
COMMIT;

WITH COST_TABLE AS (
  SELECT PROJECT_ID, SUM(CURRENT_WAGE) HR_COST 
    FROM `PROJECT` NATURAL JOIN `ASSIGNMENT` 
    GROUP BY PROJECT_ID
    )
SELECT PROJECT_ID, PROJECT_NAME, CONTRACT_VALUE - HR_COST AS PROFIT
  FROM `PROJECT` NATURAL JOIN `COST_TABLE` NATURAL JOIN `CONTRACT`;

WITH COST_TABLE_2 AS (
  SELECT PROJECT_ID, PROJECT_NAME, CONTRACT_VALUE, 
    SUM(CONTRACT_VALUE * PROJECT_BONUS_RATE) AS BONUS_COST, 
    SUM(CURRENT_WAGE) AS WAGE_COST
  FROM `CONTRACT` 
    NATURAL JOIN `PROJECT` 
    NATURAL JOIN `ASSIGNMENT` 
	NATURAL JOIN `ROLE` 
  GROUP BY PROJECT_ID
  )
SELECT *, CONTRACT_VALUE - BONUS_COST - WAGE_COST AS PROFIT
  FROM COST_TABLE_2;


-- Select all files about 1 project;

SELECT * 
FROM `FILE` 
  NATURAL JOIN `PORTFOLIO_MATERIAL` 
  NATURAL JOIN `PHASE` 
  NATURAL JOIN `PROJECT` 
WHERE UPPER(PROJECT_NAME) LIKE '%HYTERA%';


-- a view of total product price
DROP VIEW IF EXISTS `PRODUCT_LIST_TOTAL`;
CREATE VIEW `PRODUCT_LIST_TOTAL` AS
  SELECT PROJECT_ID, PROJECT_NAME, PRODUCT_LIST_ID, 
    SUM(PRODUCT_COUNT * PRICE) AS TOTAL_PRICE
    FROM PROJECT 
      NATURAL JOIN PRODUCT_LIST 
      NATURAL JOIN PRODUCT_LIST_ITEM 
      NATURAL JOIN PRODUCT
	GROUP BY PRODUCT_LIST_ID;
  
SELECT * FROM `PRODUCT_LIST_TOTAL`;

SELECT PROJECT_ID, PROJECT_NAME, SUM(AMOUNT) - CONTRACT_VALUE AS BALANCE 
  FROM `PAYMENT` 
    NATURAL JOIN `CONTRACT` 
    NATURAL JOIN `PROJECT`
  GROUP BY PROJECT_ID;


-- trigger to update product list create date

DROP TRIGGER IF EXISTS `AUTO_UPDATE_PRODUCT_LIST_DATE`;
DELIMITER //
CREATE TRIGGER `AUTO_UPDATE_PRODUCT_LIST_DATE`
AFTER INSERT
ON PRODUCT_LIST_ITEM 
FOR EACH ROW
  UPDATE PRODUCT_LIST
  SET CREATED_DATE = CURDATE()
  WHERE PRODUCT_LIST_ID = NEW.PRODUCT_LIST_ID
;
DELIMITER;

-- trigger test
SELECT * FROM PRODUCT_LIST;
SET AUTOCOMMIT = 0;
START TRANSACTION;

INSERT INTO PRODUCT_LIST_ITEM
  VALUES
    (1, 20, 3)
    ;
SELECT * FROM PRODUCT_LIST;

ROLLBACK;




